module M
  def a=(v);end
end

{:a => M, M => 3}
[M, 1]
[M..M]
(M..M)
(100...200)
puts(M)
puts(M => M)
[].each do |m|
  M
  next(M)
  n = 3
  n #ident Fixnum#
end

def M.f(a=M)
  return M
end

M[M] = M
M.a = M

if M
  M
elsif M
  M
else
  M
end

begin
  M
rescue M => m
  M
rescue M
  M
else
  M
end

while M; end

M unless M
M if M
M while M
M until M

case M
when M
  M
when M
  M
else
  M
end

M < M
M += M
puts(*M)
puts(**M)

"hello#{M}"
/#{M}/

0.0

M.f
M.f()
M.f=3

defined? @a
:foo
nil
(true)
$foo

?C

$a=1
alias $b $a

END {
  puts "ok"
}

undef a

for c in [1,2];end

Z ? 3 : true

a, b, *c = foo()

a[3]

:"foo"

alias a b

a = 3 rescue 7

class << self; end
def abc
  super
  super(foo)
  yield
  yield afff
  x do |a,b,*c,**d|
    foo
  end
  return
  return 3
rescue
  foo
  retry
ensure
  foo
end

while true
  break
  next
end

A::B.c :v, *c, **k

f(&c)
f(&:foo)
f &foo

# if any exceptions were thrown during type inferencing, this simple test below
# would fail.

a = 3
a #: Fixnum#

div id: "main_content_wrapper" do |z|
  z = 9
  div id: "main_content" do |y|
    x = 7
    x #ident Fixnum#
    z #ident Fixnum#
    a #ident Fixnum#
  end
end
