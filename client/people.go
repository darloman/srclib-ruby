package client

import (
	"strconv"
	"strings"

	"github.com/sourcegraph/go-nnz/nnz"

	"sourcegraph.com/sourcegraph/api_router"
	"sourcegraph.com/sourcegraph/srcgraph/person"
)

// PeopleService communicates with the people-related endpoints in the
// Sourcegraph API.
type PeopleService interface {
	// Get fetches a person.
	Get(person PersonSpec) (*person.User, Response, error)

	// List people.
	List(opt *PersonListOptions) ([]*person.User, Response, error)

	// ListAuthors lists people who authored code that person uses.
	ListAuthors(person PersonSpec, opt *PersonListAuthorsOptions) ([]*AugmentedPersonUsageByClient, Response, error)

	// ListClients lists people who use code that person authored.
	ListClients(person PersonSpec, opt *PersonListClientsOptions) ([]*AugmentedPersonUsageOfAuthor, Response, error)
}

// peopleService implements PeopleService.
type peopleService struct {
	client *Client
}

var _ PeopleService = &peopleService{}

// PersonSpec specifies a person. At least one of Email, Login, and UID must be
// nonempty.
type PersonSpec struct {
	Email string
	Login string
	UID   int
}

// PathComponent returns the URL path component that specifies the person.
func (s *PersonSpec) PathComponent() string {
	if s.Email != "" {
		return s.Email
	}
	if s.Login != "" {
		return s.Login
	}
	if s.UID > 0 {
		return "$" + strconv.Itoa(s.UID)
	}
	panic("empty PersonSpec")
}

func (s *PersonSpec) RouteVars() map[string]string {
	return map[string]string{"PersonSpec": s.PathComponent()}
}

// ParsePersonSpec parses a string generated by (*PersonSpec).String() and
// returns the equivalent PersonSpec struct.
func ParsePersonSpec(pathComponent string) (PersonSpec, error) {
	if strings.HasPrefix(pathComponent, "$") {
		uid, err := strconv.Atoi(pathComponent[1:])
		return PersonSpec{UID: uid}, err
	}
	if strings.Contains(pathComponent, "@") {
		return PersonSpec{Email: pathComponent}, nil
	}
	return PersonSpec{Login: pathComponent}, nil
}

func (s *peopleService) Get(person_ PersonSpec) (*person.User, Response, error) {
	url, err := s.client.url(api_router.Person, person_.RouteVars(), nil)
	if err != nil {
		return nil, nil, err
	}

	req, err := s.client.NewRequest("GET", url.String(), nil)
	if err != nil {
		return nil, nil, err
	}

	var person__ *person.User
	resp, err := s.client.Do(req, &person__)
	if err != nil {
		return nil, resp, err
	}

	return person__, resp, nil
}

// PersonListOptions specifies options for the PeopleService.List method.
type PersonListOptions struct {
	Query string `url:",omitempty"`

	Sort      string `url:",omitempty"`
	Direction string `url:",omitempty"`

	ListOptions
}

func (s *peopleService) List(opt *PersonListOptions) ([]*person.User, Response, error) {
	url, err := s.client.url(api_router.People, nil, opt)
	if err != nil {
		return nil, nil, err
	}

	req, err := s.client.NewRequest("GET", url.String(), nil)
	if err != nil {
		return nil, nil, err
	}

	var people []*person.User
	resp, err := s.client.Do(req, &people)
	if err != nil {
		return nil, resp, err
	}

	return people, resp, nil
}

type PersonUsageByClient struct {
	AuthorUID   nnz.Int    `db:"author_uid"`
	AuthorEmail nnz.String `db:"author_email"`
	RefCount    int        `db:"ref_count"`
}

type AugmentedPersonUsageByClient struct {
	Author *person.User
	*PersonUsageByClient
}

// PersonListAuthorsOptions specifies options for the PeopleService.ListAuthors
// method.
type PersonListAuthorsOptions PersonListOptions

func (s *peopleService) ListAuthors(person PersonSpec, opt *PersonListAuthorsOptions) ([]*AugmentedPersonUsageByClient, Response, error) {
	url, err := s.client.url(api_router.PersonAuthors, person.RouteVars(), opt)
	if err != nil {
		return nil, nil, err
	}

	req, err := s.client.NewRequest("GET", url.String(), nil)
	if err != nil {
		return nil, nil, err
	}

	var people []*AugmentedPersonUsageByClient
	resp, err := s.client.Do(req, &people)
	if err != nil {
		return nil, resp, err
	}

	return people, resp, nil
}

type PersonUsageOfAuthor struct {
	ClientUID   nnz.Int    `db:"client_uid"`
	ClientEmail nnz.String `db:"client_email"`
	RefCount    int        `db:"ref_count"`
}

type AugmentedPersonUsageOfAuthor struct {
	Client *person.User
	*PersonUsageOfAuthor
}

// PersonListClientsOptions specifies options for the PeopleService.ListClients
// method.
type PersonListClientsOptions PersonListOptions

func (s *peopleService) ListClients(person PersonSpec, opt *PersonListClientsOptions) ([]*AugmentedPersonUsageOfAuthor, Response, error) {
	url, err := s.client.url(api_router.PersonClients, person.RouteVars(), opt)
	if err != nil {
		return nil, nil, err
	}

	req, err := s.client.NewRequest("GET", url.String(), nil)
	if err != nil {
		return nil, nil, err
	}

	var people []*AugmentedPersonUsageOfAuthor
	resp, err := s.client.Do(req, &people)
	if err != nil {
		return nil, resp, err
	}

	return people, resp, nil
}

type MockPeopleService struct {
	Get_         func(person PersonSpec) (*person.User, Response, error)
	List_        func(opt *PersonListOptions) ([]*person.User, Response, error)
	ListAuthors_ func(person PersonSpec, opt *PersonListAuthorsOptions) ([]*AugmentedPersonUsageByClient, Response, error)
	ListClients_ func(person PersonSpec, opt *PersonListClientsOptions) ([]*AugmentedPersonUsageOfAuthor, Response, error)
}

var _ PeopleService = MockPeopleService{}

func (s MockPeopleService) Get(person PersonSpec) (*person.User, Response, error) {
	if s.Get_ == nil {
		return nil, &HTTPResponse{}, nil
	}
	return s.Get_(person)
}

func (s MockPeopleService) List(opt *PersonListOptions) ([]*person.User, Response, error) {
	if s.List_ == nil {
		return nil, &HTTPResponse{}, nil
	}
	return s.List_(opt)
}

func (s MockPeopleService) ListAuthors(person PersonSpec, opt *PersonListAuthorsOptions) ([]*AugmentedPersonUsageByClient, Response, error) {
	if s.ListAuthors_ == nil {
		return nil, &HTTPResponse{}, nil
	}
	return s.ListAuthors_(person, opt)
}

func (s MockPeopleService) ListClients(person PersonSpec, opt *PersonListClientsOptions) ([]*AugmentedPersonUsageOfAuthor, Response, error) {
	if s.ListClients_ == nil {
		return nil, &HTTPResponse{}, nil
	}
	return s.ListClients_(person, opt)
}
